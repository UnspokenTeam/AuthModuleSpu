// <auto-generated />
using System;
using System.Collections.Generic;
using AuthModuleSpu.Infrastructure.Contexts;
using Common.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthModuleSpu.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Domain.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<string>>("Report")
                        .HasColumnType("jsonb")
                        .HasColumnName("report");

                    b.PrimitiveCollection<List<string>>("RequestedMetrics")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("requested_metrics");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("Common.Domain.JobAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<string>("S3BucketName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("s3_bucket_name");

                    b.Property<string>("S3FileName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("s3_file_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("attachment_type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("JobId", "S3FileName", "S3BucketName")
                        .IsUnique();

                    b.ToTable("job_attachments", (string)null);
                });

            modelBuilder.Entity("Common.Domain.JobPermission", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Permission>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("user_to_task_type")
                        .HasColumnName("user_type");

                    b.HasKey("JobId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("job_permissions", (string)null);
                });

            modelBuilder.Entity("Common.Domain.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Common.Domain.NotificationReceiver", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("notification_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("notification_receivers", (string)null);
                });

            modelBuilder.Entity("Common.Domain.QueueJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<short>("Progress")
                        .HasColumnType("smallint")
                        .HasColumnName("progress");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("queue", (string)null);
                });

            modelBuilder.Entity("Common.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Common.Domain.JobAttachment", b =>
                {
                    b.HasOne("Common.Domain.Job", "Job")
                        .WithMany("JobAttachments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Common.Domain.JobPermission", b =>
                {
                    b.HasOne("Common.Domain.Job", "Job")
                        .WithMany("JobPermissions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.User", "User")
                        .WithMany("JobPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.Notification", b =>
                {
                    b.HasOne("Common.Domain.Job", "Job")
                        .WithMany("Notifications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Common.Domain.NotificationReceiver", b =>
                {
                    b.HasOne("Common.Domain.Notification", "Notification")
                        .WithMany("NotificationReceivers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.User", "User")
                        .WithMany("NotificationReceivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.QueueJob", b =>
                {
                    b.HasOne("Common.Domain.Job", "Job")
                        .WithOne("QueueJob")
                        .HasForeignKey("Common.Domain.QueueJob", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Common.Domain.Job", b =>
                {
                    b.Navigation("JobAttachments");

                    b.Navigation("JobPermissions");

                    b.Navigation("Notifications");

                    b.Navigation("QueueJob")
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.Notification", b =>
                {
                    b.Navigation("NotificationReceivers");
                });

            modelBuilder.Entity("Common.Domain.User", b =>
                {
                    b.Navigation("JobPermissions");

                    b.Navigation("NotificationReceivers");
                });
#pragma warning restore 612, 618
        }
    }
}
